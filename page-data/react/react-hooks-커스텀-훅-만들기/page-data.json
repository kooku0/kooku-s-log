{"componentChunkName":"component---src-templates-blog-post-js","path":"/react/react-hooks-커스텀-훅-만들기/","result":{"data":{"site":{"siteMetadata":{"title":"Kooku's log","author":"Kooku","siteUrl":"https://kooku.netlify.com","comment":{"disqusShortName":"","utterances":"koomg9599/kooku-s-log"},"sponsor":{"buyMeACoffeeId":"kooku"}}},"markdownRemark":{"id":"b2c7971f-04c1-5c3b-9e2c-23d8520348d5","excerpt":"솔직히 이 글을 읽는 것 보다는 공식문서를 읽는게 더 좋습니다. 참고할만한 링크는 다음과 같습니다. https://ko.reactjs.org/docs/hooks-overview.html#building-your-own-hooks https://ko.reactjs.org/docs/hooks-rules.html#eslint-plugin 저는 react를 이용해서 프로젝트를 하면 거의 대부분 react-hooks…","html":"<p>솔직히 이 글을 읽는 것 보다는 공식문서를 읽는게 더 좋습니다.</p>\n<p>참고할만한 링크는 다음과 같습니다.</p>\n<ul>\n<li><a href=\"https://ko.reactjs.org/docs/hooks-overview.html#building-your-own-hooks\">https://ko.reactjs.org/docs/hooks-overview.html#building-your-own-hooks</a></li>\n<li><a href=\"https://ko.reactjs.org/docs/hooks-rules.html#eslint-plugin\">https://ko.reactjs.org/docs/hooks-rules.html#eslint-plugin</a></li>\n</ul>\n<p>저는 react를 이용해서 프로젝트를 하면 거의 대부분 react-hooks를 이용합니다. 그 이유는 편하고, 모듈화를 할 수 있기 때문입니다.</p>\n<p>특히 모듈화가 대박인데, 커스텀 훅을 만들어 사용하면 graceful한 code를 만들 수 있습니다.</p>\n<p>이번에는 예시로 input component에 custom hook을 붙히는 작업을 해보겠습니다.</p>\n<p>먼저 custom hook에 대해서 몇 가지 알아야 하는 내용이 있습니다. 이 내용은 공식문서을 참조하였으니 더 알고 싶으신 분들은 <a href=\"https://ko.reactjs.org/docs/hooks-overview.html#building-your-own-hooks\">공식문서</a>를 확인하시면 될 것 같습니다.</p>\n<blockquote>\n<p>Custom Hook은 기능이라기보다는 컨벤션(convention)에 가깝습니다. 이름이 ”<code class=\"language-text\">use</code>“로 시작하고, 안에서 다른 Hook을 호출한다면 그 함수를 custom Hook이라고 부를 수 있습니다. <code class=\"language-text\">useSomething</code>이라는 네이밍 컨벤션은 linter 플러그인이 Hook을 인식하고 버그를 찾을 수 있게 해줍니다.</p>\n</blockquote>\n<p><em>즉, 커스텀 훅은 네이밍을 <code class=\"language-text\">use~</code> 로 작성해야한다는 것 입니다. 이것만 주의하시면 될 것 같습니다.</em></p>\n<p><em>위의 공식문서에서 언급한 것 처럼 <a href=\"https://www.npmjs.com/package/eslint-plugin-react-hooks\"><code class=\"language-text\">eslint-plugin-react-hooks</code></a>는 하시면 좋습니다!</em></p>\n<p>먼저 input component를 만들어 보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>input className<span class=\"token operator\">=</span><span class=\"token string\">\"input_box\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span> \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App</code></pre></div>\n<p>이제 custom hook을 만들어보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useInput</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">initValue</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">,</span> setValue<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>initValue<span class=\"token punctuation\">)</span>\n  \n  <span class=\"token keyword\">const</span> inputEvent <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    value<span class=\"token operator\">:</span> value<span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">onChange</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> target <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">onKeyDown</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> key <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string\">'ArrowUp'</span><span class=\"token operator\">:</span>\n          <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ArrowUp'</span><span class=\"token punctuation\">)</span>\n          <span class=\"token keyword\">break</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string\">'ArrowDown'</span><span class=\"token operator\">:</span>\n          <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ArrowDown'</span><span class=\"token punctuation\">)</span>\n          <span class=\"token keyword\">break</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string\">'Enter'</span><span class=\"token operator\">:</span>\n          <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Enter'</span><span class=\"token punctuation\">)</span>\n          <span class=\"token keyword\">break</span>\n        <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n          <span class=\"token keyword\">break</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">onClick</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Click'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> inputEvent <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> useInput</code></pre></div>\n<p>입력시 useState를 통해 value가 바뀌게 하였으며, inputEvent까지 예시로 몇개 적어주었습니다.</p>\n<p>커스텀 훅을 만들었으니 이제 input component에 붙여보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> useInput <span class=\"token keyword\">from</span> <span class=\"token string\">'hooks/use-input'</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> inputEvent <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useInput</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>input className<span class=\"token operator\">=</span><span class=\"token string\">\"input_box\"</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>inputEvent<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span> \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App</code></pre></div>\n<p>react hooks를 사용하지 않았다면 setState를 이용했어야하는 작업이 모듈화를 통해 훨씬 간결해지고 reuseable해졌습니다.</p>\n<p>만약 react-hooks를 사용하지 않고 state를 사용하면 어떻게 작성이 될까요?</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  state<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>\n      value<span class=\"token operator\">:</span> <span class=\"token string\">''</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function-variable function\">handleChange</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> target <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> value<span class=\"token operator\">:</span> target<span class=\"token punctuation\">.</span>value <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>input\n      className<span class=\"token operator\">=</span><span class=\"token string\">\"input_box\"</span>\n      value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span>\n\t  onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">/</span><span class=\"token operator\">></span> \n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App</code></pre></div>\n<p>위에 보다 훨씬 양이 많은 걸 확인 할 수 있습니다~, 코드 재사용도 불가능 하구요!</p>\n<p>모두 react-hooks를 사랑합시다~ ㅎㅎ</p>","frontmatter":{"title":"react-hooks 커스텀 훅 만들기","date":"September 08, 2019"}}},"pageContext":{"slug":"/react/react-hooks-커스텀-훅-만들기/","previous":{"fields":{"slug":"/web/csrf/"},"frontmatter":{"title":"csrf","category":"web"}},"next":{"fields":{"slug":"/javascript/javascript-engin-fundamentals/"},"frontmatter":{"title":"JavaScript engine fundamentals","category":"javascript"}}}}}