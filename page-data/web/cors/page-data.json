{"componentChunkName":"component---src-templates-blog-post-js","path":"/web/cors/","result":{"data":{"site":{"siteMetadata":{"title":"Kooku's log","author":"Kooku","siteUrl":"https://kooku.netlify.com","comment":{"disqusShortName":"","utterances":"koomg9599/kooku-s-log"},"sponsor":{"buyMeACoffeeId":"kooku"}}},"markdownRemark":{"id":"67eb472d-4d9b-551c-aaa7-0616156e690a","excerpt":"Overview HTTP 요청은 기본적으로 Cross-site HTTP Requests가 가능합니다. 다시 말하면  태그로 다른 도메인의 이미지 파일을 가져오거나,  태그로 다른 도메인의 css를 가져오거나,  태그로 다른 도메인의 javascript 라이브러리를 가져오는 것이 모두 가능합니다. 하지만  로 둘러싸여 있는 스크립트에서 생성된 Cross-Site HTTP Requests는 Same Origin Policy를 적용 받기 때문에 Cross-Site HTTP Requests…","html":"<h2 id=\"overview\" style=\"position:relative;\"><a href=\"#overview\" aria-label=\"overview permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Overview</h2>\n<p>HTTP 요청은 기본적으로 Cross-site HTTP Requests가 가능합니다. 다시 말하면 <code class=\"language-text\">&lt;img&gt;</code> 태그로 다른 도메인의 이미지 파일을 가져오거나, <code class=\"language-text\">&lt;link&gt;</code> 태그로 다른 도메인의 css를 가져오거나, <code class=\"language-text\">&lt;script&gt;</code> 태그로 다른 도메인의 javascript 라이브러리를 가져오는 것이 모두 가능합니다. 하지만 <code class=\"language-text\">&lt;script&gt;&lt;/script&gt;</code> 로 둘러싸여 있는 스크립트에서 생성된 Cross-Site HTTP Requests는 Same Origin Policy를 적용 받기 때문에 Cross-Site HTTP Requests가 불가능합니다. 즉, <strong>프로토콜</strong>, <strong>호스트명</strong>, <strong>포트</strong>가 같아야만 요청이 가능합니다.</p>\n<p>하지만 <strong>AJAX</strong>가 널리 사용되면서 <code class=\"language-text\">&lt;script&gt;&lt;/script&gt;</code>로 둘러싸여 있는 스크립트에서 생성되는 <code class=\"language-text\">XMLHttpRequest</code>에 대해서도 Cross-Site HTTP Requests가 가능해야 한다는 요구가 늘어나자 W3C에서 CORS라는 이름의 권고안이 나오게 되었습니다.</p>\n<h2 id=\"same-origin-policy\" style=\"position:relative;\"><a href=\"#same-origin-policy\" aria-label=\"same origin policy permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Same-origin policy</h2>\n<p><strong>동일 출처 정책</strong>은 문서나 스크립트가 다른 출처의 리소스와 통신하는 것을 제한하는 중요한 보안 방식입니다. 이것은 잠재적 악성 문서를 격리하여, 공격을 막는데 도움을 줍니다.</p>\n<p>출처는 위에 기술했듯이 프로토콜, 포트, 호스트가 동일하면 각 페이지의 출처도 동일합니다.</p>\n<h2 id=\"cors-요청의-종류\" style=\"position:relative;\"><a href=\"#cors-%EC%9A%94%EC%B2%AD%EC%9D%98-%EC%A2%85%EB%A5%98\" aria-label=\"cors 요청의 종류 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CORS 요청의 종류</h2>\n<p>CORS 요청은 Simple/Preflight, Credential/Non-Credential의 조합으로 4가지가 존재합니다. 브라우저가 요청 내용을 분석하여 4가지 방식 중 해당하는 방식으로 서버에 요청을 날리므로, 프로그래머가 목적에 맞는 방식을 선택하고 그 조건에 맞게 코딩해야 합니다.</p>\n<h3 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>reference</h3>\n<ul>\n<li><a href=\"https://brownbears.tistory.com/336\">CORS :: 개인적인공간</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy\">Same-origin policy :: MDN web docs</a></li>\n</ul>","frontmatter":{"title":"cors","date":"September 02, 2019"}}},"pageContext":{"slug":"/web/cors/","previous":{"fields":{"slug":"/troubleshooting/nginx에서-static-file-serving하기/"},"frontmatter":{"title":"Nginx에서 static file serving하기","category":"troubleshooting"}},"next":{"fields":{"slug":"/browser/최신-브라우저의-내부-살펴보기-(2)/"},"frontmatter":{"title":"최신 브라우저의 내부 살펴보기 (2)","category":"browser"}}}}}