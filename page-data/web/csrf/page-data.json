{"componentChunkName":"component---src-templates-blog-post-js","path":"/web/csrf/","result":{"data":{"site":{"siteMetadata":{"title":"Kooku's log","author":"Kooku","siteUrl":"https://kooku.netlify.com","comment":{"disqusShortName":"","utterances":"koomg9599/kooku-s-log"},"sponsor":{"buyMeACoffeeId":"kooku"}}},"markdownRemark":{"id":"dbf45a34-9777-5ff5-b1c1-076676f4260b","excerpt":"Overview 내가 csrf를 처음듣게 된건 Django로 WSA를 만들때이다. 그때 api 통신을 할때 POST, PUT, DELETE http method를 사용할때 header에 csrf를 넣어줘야하는게 default 였다. 이를 사용하지 않기 위해서는 decorator로 를 적어줘야 했다. 보안때문에 csrf를 사용한다는 것은 알고 있었는데, csrf를 이용해 어떻게 공격을 막을것인가?에 대해서는 알지 못했는데 이번에 정리하였다. CSRF (Cross site request forgery…","html":"<h2 id=\"overview\" style=\"position:relative;\"><a href=\"#overview\" aria-label=\"overview permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Overview</h2>\n<p>내가 <strong>csrf</strong>를 처음듣게 된건 Django로 WSA를 만들때이다. 그때 api 통신을 할때 POST, PUT, DELETE http method를 사용할때 header에 csrf를 넣어줘야하는게 default 였다. 이를 사용하지 않기 위해서는 decorator로 <code class=\"language-text\">@csrf_exempt</code>를 적어줘야 했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@csrf_exempt</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">postBlog</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">None</span></code></pre></div>\n<p>보안때문에 csrf를 사용한다는 것은 알고 있었는데, csrf를 이용해 어떻게 공격을 막을것인가?에 대해서는 알지 못했는데 이번에 정리하였다.</p>\n<h2 id=\"csrf-cross-site-request-forgery-사이트간-요청-위조\" style=\"position:relative;\"><a href=\"#csrf-cross-site-request-forgery-%EC%82%AC%EC%9D%B4%ED%8A%B8%EA%B0%84-%EC%9A%94%EC%B2%AD-%EC%9C%84%EC%A1%B0\" aria-label=\"csrf cross site request forgery 사이트간 요청 위조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CSRF (Cross site request forgery, 사이트간 요청 위조)</h2>\n<p>CSRF란 웹 사이트의 취약점을 이용하여 사용자가 의도하지 않는 요청을 하도록 하는 공격을 의미합니다.</p>\n<h3 id=\"공격방법\" style=\"position:relative;\"><a href=\"#%EA%B3%B5%EA%B2%A9%EB%B0%A9%EB%B2%95\" aria-label=\"공격방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>공격방법</h3>\n<p>http프로토콜의 상태없음(stateless) 특성에 기인한 특정 웹 어플리케이션에 대한 일련의 요청들의 상관관계를 특정할 수 없기 때문에 세션 유지등에 일반적으로 사용되는 쿠키 정보 등이 조건만 만족한다면 자동적으로 송신되기 때문에 가능합니다.</p>\n<p>여기서 상관관계를 특정할 수 없다는 의미는 예를 들어 카트화면 -> 주문정보 입력 -> 주문완료로 이어지는 주문 프로세스를 가진 웹 어플리케이션에서 각각의 페이지에대한 요청이 연속적으로 이어지는지에 대한 제어를 할 수 없다는 것을 의미합니다.</p>\n<p>이 공격수법은 결과적으로 피해자가 의도한 요청과 동일한 과정으로 진행되므로 공격자에 대한 추적이 어려울 수 있습니다.</p>\n<h3 id=\"방어\" style=\"position:relative;\"><a href=\"#%EB%B0%A9%EC%96%B4\" aria-label=\"방어 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>방어</h3>\n<p>이를 막기위해서 서버에서는 <strong>CSRF Token</strong>을 사용자에게 발급해주고 사용자는 이 토큰을 세션에 저장하여 request를 보낼때 마다 token을 해더에 삽입하여 보낸다. 서버는 이 token을 검증하여 올바른 사용자가 보냈는지, 올바른 요청인지 확인한다.</p>\n<p>토큰 발급에는 두가지가 있습니다.  첫번째는 로그인할때 발급. 두번째는 상관관계를 가지는 요청의 경우 요청의 단계별로 token을 발급.</p>\n<p>위의 공격방법에서 예를 든 경우를 방어하기 위해서는 첫번째, 두번째 방법을 혼합하여 사용하면 안전하게 요청을 할 수 있습니다.</p>\n<p>먼저 주문정보 입력의 요청에서는 header에 로그인할때 발급된 token을 넣어 올바른 사용자인지 verify합니다. 그리고 response로 새로운 token을 발급합니다. 이 토큰은 두번째 결제요청시 header에 넣어서 보내게 되면 두가지 검증을 할 수 있게 됩니다. (올바른 사용자인지, 올바른 절차를 거쳤는지)</p>","frontmatter":{"title":"csrf","date":"September 08, 2019"}}},"pageContext":{"slug":"/web/csrf/","previous":{"fields":{"slug":"/data structure/binary-tree/"},"frontmatter":{"title":"binary tree","category":"data structure"}},"next":{"fields":{"slug":"/react/react-hooks-커스텀-훅-만들기/"},"frontmatter":{"title":"react-hooks 커스텀 훅 만들기","category":"react"}}}}}