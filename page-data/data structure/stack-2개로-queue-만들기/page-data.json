{"componentChunkName":"component---src-templates-blog-post-js","path":"/data structure/stack-2개로-queue-만들기/","result":{"data":{"site":{"siteMetadata":{"title":"Kooku's log","author":"Kooku","siteUrl":"https://kooku.netlify.com","comment":{"disqusShortName":"","utterances":"koomg9599/kooku-s-log"},"sponsor":{"buyMeACoffeeId":"kooku"}}},"markdownRemark":{"id":"77b72d02-91e9-5a9f-bb67-e4a82755b826","excerpt":"stack 2개로 queue를 구현하는 것은 면접 단골 질문이다. 나도 처음에는 어떻게 할지 고민했는데, 조금만 생각해보면 정말 간단히 만들 수가 있다. 진짜 완벽!!! 이렇게 코드를 짜게되면 deQueue가 호출하기 전까지는 inQueue에 계속 넣게 되고, deQueue가 호출되면 inBox가 빌때까지 outBox로 모두 넘겨주게 된다. 그러면 순서가 거꾸로 되기 때문에 queue처럼 만들 수 있다. 여기서 중요한 것은 deQueue가 한 번 호출된 후 다시 outBox에서 inBox…","html":"<p>stack 2개로 queue를 구현하는 것은 면접 단골 질문이다.</p>\n<p>나도 처음에는 어떻게 할지 고민했는데, 조금만 생각해보면 정말 간단히 만들 수가 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c++\"><pre class=\"language-c++\"><code class=\"language-c++\">class Queue{\n    private stack&lt;int&gt; inBox;\n    private stack&lt;int&gt; outBox;\n\n    public void enQueue(int a){\n        inBox.push(a);\n\t}\n    public int deQueue(){\n        if (!outBox.empty()){\n            return outBox.pop();\n\t\t} else {\n            while(!inBox.empty()) {\n            \tint tmp = inBox.pop();\n                outBox.push(tmp);\n\t\t\t}\n            return outBox.pop();\n\t\t}\n\t}\n}</code></pre></div>\n<p>진짜 완벽!!!</p>\n<p>이렇게 코드를 짜게되면 deQueue가 호출하기 전까지는 inQueue에 계속 넣게 되고, deQueue가 호출되면 inBox가 빌때까지 outBox로 모두 넘겨주게 된다. 그러면 순서가 거꾸로 되기 때문에 queue처럼 만들 수 있다.</p>\n<p>여기서 중요한 것은 deQueue가 한 번 호출된 후 다시 outBox에서 inBox로 값을 넘겨줄 필요가 없다는 것이다. 한번 정렬이 되었기 때문에 outBox에 있는 값을 전부 pop한 뒤에 다시 넣어주면 된다.</p>","frontmatter":{"title":"stack 2개로 queue 만들기","date":"December 20, 2019"}}},"pageContext":{"slug":"/data structure/stack-2개로-queue-만들기/","previous":{"fields":{"slug":"/etc/취업-성적표/"},"frontmatter":{"title":"취업 성적표","category":"etc"}},"next":{"fields":{"slug":"/css/scss-문법-정리/"},"frontmatter":{"title":"SCSS 문법 정리","category":"css"}}}}}