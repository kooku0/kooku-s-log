{"componentChunkName":"component---src-templates-blog-post-js","path":"/node.js/express.js-란/","result":{"data":{"site":{"siteMetadata":{"title":"Kooku's log","author":"Kooku","siteUrl":"https://kooku.netlify.com","comment":{"disqusShortName":"","utterances":"koomg9599/kooku-s-log"},"sponsor":{"buyMeACoffeeId":"kooku"}}},"markdownRemark":{"id":"3b8e16dd-a1b9-55da-8733-f967ac36c26f","excerpt":"Express 공식문서를 참고하면 Express를 다음과 같이 설명하고 있습니다. Node.js를 위한 빠르고 개방적인 간결한 웹 프레임워크 개발자는 다양한 기능의 미들웨어를 필요한 것만 선택하여 익스프레스와 결합해 사용할 수 있습니다. 이러한 미들웨어(Middleware) 구조이기에 Express는 간결하고 유연한 Node.js 웹 어플리케이션 프레임워크라고 부릅니다. 미들에어 구조라는게 무슨 말이냐면 로봇에 각종 부품들을 장착하듯이 express에 javascript…","html":"<p><strong>Express</strong> 공식문서를 참고하면 <strong>Express</strong>를 다음과 같이 설명하고 있습니다.</p>\n<p><em><div align=\"center\">Node.js를 위한 빠르고 개방적인 간결한 웹 프레임워크</div></em></p>\n<p>개발자는 다양한 기능의 미들웨어를 필요한 것만 선택하여 익스프레스와 결합해 사용할 수 있습니다. 이러한 미들웨어(Middleware) 구조이기에 <strong>Express</strong>는 간결하고 유연한 Node.js 웹 어플리케이션 프레임워크라고 부릅니다.</p>\n<p>미들에어 구조라는게 무슨 말이냐면 로봇에 각종 부품들을 장착하듯이 express에 javascript로 작성된 다양한 기능들을 붙힐 수 있다는 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// my-middleware.js</span>\nmodule<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">options</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// options 객체에 따른 middleware 함수 구현</span>\n    <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위에 작성된 미들웨어를 개발자는 다음과 같이 사용할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> mw <span class=\"token operator\">=</span> <span class=\"token function\">requjire</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./my-middleware.js'</span><span class=\"token punctuation\">)</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token function\">mw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> option1<span class=\"token operator\">:</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> option2<span class=\"token operator\">:</span> <span class=\"token string\">'2'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>","frontmatter":{"title":"Express.js 란","date":"December 31, 2019"}}},"pageContext":{"slug":"/node.js/express.js-란/","previous":{"fields":{"slug":"/node.js/typescript로-node.js-서버-만들기/"},"frontmatter":{"title":"typescript로 node.js 서버 만들기","category":"node.js"}},"next":{"fields":{"slug":"/node.js/npm-vs-npx/"},"frontmatter":{"title":"npm vs npx","category":"node.js"}}}}}