{"componentChunkName":"component---src-templates-blog-post-js","path":"/node.js/winston으로-log-관리하기/","result":{"data":{"site":{"siteMetadata":{"title":"Kooku's log","author":"Kooku","siteUrl":"https://kooku.netlify.com","comment":{"disqusShortName":"","utterances":"koomg9599/kooku-s-log"},"sponsor":{"buyMeACoffeeId":"kooku"}}},"markdownRemark":{"id":"4c178626-a0c2-5f0d-9456-d40b1818b9bb","excerpt":"이 문서는 winston Git Repo의 README를 번역한 문서입니다. 맨 마지막에 실제 제가 작성한 sample 코드가 있으니 그대로 사용하는 것도 추천합니다. winston이란 winston은 simple하고 universal한 logging 라이브러리로 다중전송을 지원합니다. 각 winston logger에는 여러 레벨로 구성된 다중 전송이 있을 수 있습니다. 예를 들어 오류 로그를 데이터비이스와 콘솔 또는 로컬 파일에 동시에 저장, 출력할 수 있습니다. winston은 logging…","html":"<blockquote>\n<p>이 문서는 <a href=\"https://github.com/winstonjs/winston\">winston Git Repo</a>의 README를 번역한 문서입니다. 맨 마지막에 실제 제가 작성한 sample 코드가 있으니 그대로 사용하는 것도 추천합니다.</p>\n</blockquote>\n<h2 id=\"winston이란\" style=\"position:relative;\"><a href=\"#winston%EC%9D%B4%EB%9E%80\" aria-label=\"winston이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>winston이란</h2>\n<p>winston은 simple하고 universal한 logging 라이브러리로 다중전송을 지원합니다. 각 winston logger에는 여러 레벨로 구성된 다중 전송이 있을 수 있습니다. 예를 들어 오류 로그를 데이터비이스와 콘솔 또는 로컬 파일에 동시에 저장, 출력할 수 있습니다.</p>\n<p>winston은 logging process 일부를 분리하여 더 유연하고 확장 가능하도록 하는 것을 목표로 합니다. 로그 포멧 &#x26; 레벨을 유연하게 지원하고, API가 transport logging(즉, 로그 저장/색인화 방법, 사용자 지정 전송 추가)을 분리하였습니다.</p>\n<h2 id=\"usage\" style=\"position:relative;\"><a href=\"#usage\" aria-label=\"usage permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Usage</h2>\n<p><code class=\"language-text\">winston</code>을 사용하는 방법은 자신의 logger를 만드는 것 입니다. 이는 <code class=\"language-text\">winston.createLogger</code>를 이용해서 쉽게 만들 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> winston <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'winston'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> logger <span class=\"token operator\">=</span> winston<span class=\"token punctuation\">.</span><span class=\"token function\">createLogger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  level<span class=\"token operator\">:</span> <span class=\"token string\">'info'</span><span class=\"token punctuation\">,</span>\n  format<span class=\"token operator\">:</span> winston<span class=\"token punctuation\">.</span>format<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  defaultMeta<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> service<span class=\"token operator\">:</span> <span class=\"token string\">'user-serice'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  transports<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token comment\">// - 'error' level의 모든 logs는 'error.log' 파일에 기록합니다.</span>\n    <span class=\"token comment\">// - 'info' level의 모든 logs는 'conbined.log' 파일에 기록합니다.</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">winston<span class=\"token punctuation\">.</span>transports<span class=\"token punctuation\">.</span>File</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> filename<span class=\"token operator\">:</span> <span class=\"token string\">'error.log'</span><span class=\"token punctuation\">,</span> level<span class=\"token operator\">:</span> <span class=\"token string\">'error'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">winston<span class=\"token punctuation\">.</span>transports<span class=\"token punctuation\">.</span>File</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> filename<span class=\"token operator\">:</span> <span class=\"token string\">'conbined.log '</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// production 상태가 아니라면 `console`에 다음과 같은 format으로 출력합니다.</span>\n<span class=\"token comment\">// ${info.level}: ${info.message} JSON.stringify{{ ...rest }}</span>\n<span class=\"token comment\">//</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  logger<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">winston<span class=\"token punctuation\">.</span>transports<span class=\"token punctuation\">.</span>console</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      format<span class=\"token operator\">:</span> winston<span class=\"token punctuation\">.</span>format<span class=\"token punctuation\">.</span><span class=\"token function\">simple</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"logging\" style=\"position:relative;\"><a href=\"#logging\" aria-label=\"logging permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Logging</h2>\n<p><code class=\"language-text\">winston</code>의 Logging level은 <a href=\"https://tools.ietf.org/html/rfc5424\">RFC5454</a>에서 정한 심각한 정도에 따라 분류됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> levels <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  error<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  warn<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  info<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  http<span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n  verbose<span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>\n  debug<span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span>\n  silly<span class=\"token operator\">:</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"create-your-own-logger\" style=\"position:relative;\"><a href=\"#create-your-own-logger\" aria-label=\"create your own logger permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Create your own Logger</h3>\n<p><code class=\"language-text\">winston.createLogger</code>를 이용해서 logger를 생성할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> logger <span class=\"token operator\">=</span> winston<span class=\"token punctuation\">.</span><span class=\"token function\">createLogger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  transports<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">winston<span class=\"token punctuation\">.</span>transports<span class=\"token punctuation\">.</span>Console</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">winston<span class=\"token punctuation\">.</span>transports<span class=\"token punctuation\">.</span>File</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> filename<span class=\"token operator\">:</span> <span class=\"token string\">'conbinded.log'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>logger’s parameters:</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Name</th>\n<th align=\"center\">Default</th>\n<th align=\"center\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\"><code class=\"language-text\">level</code></td>\n<td align=\"center\"><code class=\"language-text\">info</code></td>\n<td align=\"center\"><code class=\"language-text\">info.level</code>보다 작거나 동등한 레벨을 Logging한다.</td>\n</tr>\n<tr>\n<td align=\"center\"><code class=\"language-text\">levels</code></td>\n<td align=\"center\"><code class=\"language-text\">winston.config.npm.levels</code></td>\n<td align=\"center\">Levels(colors)는 log 우선순위를 보여준다.</td>\n</tr>\n<tr>\n<td align=\"center\"><code class=\"language-text\">format</code></td>\n<td align=\"center\"><code class=\"language-text\">winston.format.json</code></td>\n<td align=\"center\"><code class=\"language-text\">info</code> 메시지 포멧</td>\n</tr>\n<tr>\n<td align=\"center\"><code class=\"language-text\">transports</code></td>\n<td align=\"center\"><code class=\"language-text\">[]</code> (<em>No transports</em>)</td>\n<td align=\"center\"><code class=\"language-text\">info</code> 메시지의 logging targets를 설정할 수 있다.</td>\n</tr>\n<tr>\n<td align=\"center\"><code class=\"language-text\">exitOnError</code></td>\n<td align=\"center\"><code class=\"language-text\">true</code></td>\n<td align=\"center\">만약 false라면 exceptions을 처리할 때 process.exit를 하지 않습니다.</td>\n</tr>\n<tr>\n<td align=\"center\"><code class=\"language-text\">silent</code></td>\n<td align=\"center\"><code class=\"language-text\">false</code></td>\n<td align=\"center\">만약 true라면 모든 logs가 억제됩니다.</td>\n</tr>\n</tbody>\n</table>\n<p><code class=\"language-text\">createLogger</code>에서 제공된 levels는 반환된 <code class=\"language-text\">logger</code>의 methods로 정의되어 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Logging</span>\nlogger<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  level<span class=\"token operator\">:</span> <span class=\"token string\">'info'</span><span class=\"token punctuation\">,</span>\n  message<span class=\"token operator\">:</span> <span class=\"token string\">'Hello distributed log files!'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nlogger<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello again distributed logs'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">logger</code>의 transports들을 추가하거나 삭제할 수 도 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> files <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">winston<span class=\"token punctuation\">.</span>transports<span class=\"token punctuation\">.</span>File</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> filenmae<span class=\"token operator\">:</span> <span class=\"token string\">'conbined.log'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> console <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">winston<span class=\"token punctuation\">.</span>transports<span class=\"token punctuation\">.</span>console</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nlogger\n  <span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Remove all transports</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Add console transports</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>files<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Add file transport</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Remove console transport</span></code></pre></div>\n<p><code class=\"language-text\">winston.Logger</code>는 <code class=\"language-text\">configure</code> methods를 사용해서 이전에 설정한 configure를 reconfigure 할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> logger <span class=\"token operator\">=</span> winston<span class=\"token punctuation\">.</span><span class=\"token function\">createLogger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  level<span class=\"token operator\">:</span> <span class=\"token string\">'info'</span><span class=\"token punctuation\">,</span>\n  transports<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">winston<span class=\"token punctuation\">.</span>transports<span class=\"token punctuation\">.</span>Console</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">winston<span class=\"token punctuation\">.</span>transports<span class=\"token punctuation\">.</span>File</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> filename<span class=\"token operator\">:</span> <span class=\"token string\">'combined.log'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 이전의 configuration을 새로운 configuration으로 교체합니다.</span>\n<span class=\"token keyword\">const</span> DailyRotatFile <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'winston-daily-rotate-file'</span><span class=\"token punctuation\">)</span>\nlogger<span class=\"token punctuation\">.</span><span class=\"token function\">confire</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  level<span class=\"token operator\">:</span> <span class=\"token string\">'verbose'</span><span class=\"token punctuation\">,</span>\n  transports<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">DailyRotateFile</span><span class=\"token punctuation\">(</span>opts<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"creating-child-loggers\" style=\"position:relative;\"><a href=\"#creating-child-loggers\" aria-label=\"creating child loggers permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Creating child loggers</h3>\n<p>기존에 존재하는 loggers에 metadata를 override 함으로써 자식로거를 생성할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> logger <span class=\"token operator\">=</span> winston<span class=\"token punctuation\">.</span><span class=\"token function\">createLogger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  transports<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">winston<span class=\"token punctuation\">.</span>transports<span class=\"token punctuation\">.</span>Console</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> childLogger <span class=\"token operator\">=</span> logger<span class=\"token punctuation\">.</span><span class=\"token function\">child</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> requestId<span class=\"token operator\">:</span> <span class=\"token string\">'451'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"streams-code-classlanguage-textobjectmodecode-and-code-classlanguage-textinfocode-objects\" style=\"position:relative;\"><a href=\"#streams-code-classlanguage-textobjectmodecode-and-code-classlanguage-textinfocode-objects\" aria-label=\"streams code classlanguage textobjectmodecode and code classlanguage textinfocode objects permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Streams, <code class=\"language-text\">ObjectMode</code>, and <code class=\"language-text\">info</code> objects</h3>\n<p><code class=\"language-text\">winston</code>에서 <code class=\"language-text\">Logger</code>와 <code class=\"language-text\">Transport</code> 인스턴스들은 <code class=\"language-text\">[objectMode](https://nodejs.org/api/stream.html#stream_object_mode)</code>로 취급됩니다.</p>\n<p>지정된 형식으로 제공되는 <code class=\"language-text\">info</code>의 매개 변수는 하나의 로그 메세지를 나타내며 mutable 특성을 지닙니다. 그리고 객체는 항상 <code class=\"language-text\">level</code>과 <code class=\"language-text\">message</code> 속성을 가져야합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> info <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  level<span class=\"token operator\">:</span> <span class=\"token string\">'info'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// logging message의 레벨</span>\n  message<span class=\"token operator\">:</span> <span class=\"token string\">'Hey! Log something?'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 로그에 찍힌 메세지 설명</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>level과 message</strong> 이외의 속성들은 모두 ”<code class=\"language-text\">meta</code>“로 간주됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> level<span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>meta <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> info</code></pre></div>\n<p><code class=\"language-text\">logform</code>에 있는 몇몇의 속성들은 자체적으로 추가적인 속성들을 가집니다.</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Property</th>\n<th align=\"center\">Format added by</th>\n<th align=\"center\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\"><code class=\"language-text\">splat</code></td>\n<td align=\"center\"><code class=\"language-text\">splat()</code></td>\n<td align=\"center\"><code class=\"language-text\">%d %s</code>스타일 메시지에 대한 문자열 간격</td>\n</tr>\n<tr>\n<td align=\"center\"><code class=\"language-text\">timestamp</code></td>\n<td align=\"center\"><code class=\"language-text\">timestamp()</code></td>\n<td align=\"center\">메시지를 수신한 timestamp</td>\n</tr>\n<tr>\n<td align=\"center\"><code class=\"language-text\">label</code></td>\n<td align=\"center\"><code class=\"language-text\">label()</code></td>\n<td align=\"center\">각 메시지에 대한 커스텀 라벨</td>\n</tr>\n<tr>\n<td align=\"center\"><code class=\"language-text\">ms</code></td>\n<td align=\"center\"><code class=\"language-text\">ms()</code></td>\n<td align=\"center\">이전 로그 메시지 이후 경과된 시간(ms)</td>\n</tr>\n</tbody>\n</table>\n<p>사용자로써 원하는 속성을 자유롭게 추가할 수 있습니다. - <em>내부 상태는 <code class=\"language-text\">symbol</code> 속성에 의해 유지됩니다.</em></p>\n<ul>\n<li><code class=\"language-text\">Symbol.for(&#39;level&#39;)</code> <strong>(READ-ONLY)</strong> : <code class=\"language-text\">level</code> 속성과 동일합니다. <strong>모든 코드에서 immutable로 취급됩니다.</strong></li>\n<li>\n<p><code class=\"language-text\">Symbol.for(&#39;message&#39;)</code> : “finalizing formats”에 의해 설정된 전체 문자열 메시지</p>\n<ul>\n<li><code class=\"language-text\">json</code></li>\n<li><code class=\"language-text\">logstash</code></li>\n<li><code class=\"language-text\">printf</code></li>\n<li><code class=\"language-text\">prettyPrint</code></li>\n<li><code class=\"language-text\">simple</code></li>\n</ul>\n</li>\n<li><code class=\"language-text\">Symbol.for(&#39;splat&#39;)</code> : 추가적인 문자열 보간 인수. <em><code class=\"language-text\">splat()</code> 포멧으로만 사용된다.</em></li>\n</ul>\n<p>이러한 Symbol들은 <code class=\"language-text\">triple-beam</code>이라는 패키지에 들있습니다. 그래서 <code class=\"language-text\">logform</code> 사용자들은 이를 이용해 다음과 같이 symbol들을 사용할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">LEVEL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">MESSAGE</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">SPLAT</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'triple-beam'</span><span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token constant\">LEVEL</span> <span class=\"token operator\">===</span> Symbol<span class=\"token punctuation\">.</span><span class=\"token function\">for</span><span class=\"token punctuation\">(</span><span class=\"token string\">'level'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// true</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token constant\">MESSAGE</span> <span class=\"token operator\">===</span> Symbol<span class=\"token punctuation\">.</span><span class=\"token function\">for</span><span class=\"token punctuation\">(</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// true</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token constant\">SPLAT</span> <span class=\"token operator\">===</span> Symbol<span class=\"token punctuation\">.</span><span class=\"token function\">for</span><span class=\"token punctuation\">(</span><span class=\"token string\">'splat'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// true</span></code></pre></div>\n<blockquote>\n<p><strong>NOTE:</strong> <code class=\"language-text\">meta</code> 객체에 있는 <code class=\"language-text\">{ message }</code> 속성은 이미 제공된 <code class=\"language-text\">msg</code> 속성에 자동으로 연결됩니다. 예를들어 아래의 ‘world’는 ‘hello’에 연결됩니다.:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">logger<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> message<span class=\"token operator\">:</span> <span class=\"token string\">'world'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\nlogger<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> message<span class=\"token operator\">:</span> <span class=\"token string\">'world'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n</blockquote>\n<h2 id=\"formats\" style=\"position:relative;\"><a href=\"#formats\" aria-label=\"formats permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Formats</h2>\n<p><code class=\"language-text\">winston</code>에서의 Formats은 <code class=\"language-text\">winston.format</code>으로 접근할 수 있습니다. 이것은 <code class=\"language-text\">winston</code>에서 여러 개로 분리된 모듈중에 하나인 <code class=\"language-text\">logform</code>에 있습니다. 이것은 유연하게 format을 작성할 수 있게 하는 것을 도와줍니다.\n현재 <code class=\"language-text\">node</code> 버전의 template 문자열은 매우 성능이 뛰어나며 사용자 포멧을 권장합니다. 만약 로그의 format을 지정하고 싶다면 <code class=\"language-text\">winston.format.printf</code>를 사용하시면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> createLogger<span class=\"token punctuation\">,</span> format<span class=\"token punctuation\">,</span> transports <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'winston'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> combine<span class=\"token punctuation\">,</span> timestamp<span class=\"token punctuation\">,</span> label<span class=\"token punctuation\">,</span> printf <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> format\n\n<span class=\"token keyword\">const</span> myFormat <span class=\"token operator\">=</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> level<span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">,</span> label<span class=\"token punctuation\">,</span> timestamp <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>timestamp<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> [</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>label<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">] </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>level<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>message<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> logger <span class=\"token operator\">=</span> <span class=\"token function\">createLogger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  format<span class=\"token operator\">:</span> <span class=\"token function\">combine</span><span class=\"token punctuation\">(</span><span class=\"token function\">label</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> label<span class=\"token operator\">:</span> <span class=\"token string\">'right meow!'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">timestamp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> myFormat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  transports<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">transports<span class=\"token punctuation\">.</span>Console</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"combining-formats\" style=\"position:relative;\"><a href=\"#combining-formats\" aria-label=\"combining formats permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Combining formats</h3>\n<p>여러 format들은 <code class=\"language-text\">format.combine</code>을 통해서 하나의 format으로 합칠 수 있습니다. <code class=\"language-text\">format.combine</code>은 <code class=\"language-text\">opts</code>가 없으므로 이전에 만들어진 결합된 format 반환만 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> createLogger<span class=\"token punctuation\">,</span> format<span class=\"token punctuation\">,</span> transports <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'winston'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> combine<span class=\"token punctuation\">,</span> timestamp<span class=\"token punctuation\">,</span> label<span class=\"token punctuation\">,</span> prettyPrint <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> format\n\n<span class=\"token keyword\">const</span> logger <span class=\"token operator\">=</span> <span class=\"token function\">createLogger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  format<span class=\"token operator\">:</span> <span class=\"token function\">combine</span><span class=\"token punctuation\">(</span><span class=\"token function\">label</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> label<span class=\"token operator\">:</span> <span class=\"token string\">'right meow!'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">timestamp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">prettyPrint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  transports<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">transports<span class=\"token punctuation\">.</span>Console</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nlogger<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  level<span class=\"token operator\">:</span> <span class=\"token string\">'info'</span><span class=\"token punctuation\">,</span>\n  message<span class=\"token operator\">:</span> <span class=\"token string\">'What time is the testing at?'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Outputs:</span>\n<span class=\"token comment\">// { level: 'info',</span>\n<span class=\"token comment\">//   message: 'What time is the testing at?',</span>\n<span class=\"token comment\">//   label: 'right meow!',</span>\n<span class=\"token comment\">//   timestamp: '2017-09-30T03:57:26.875Z' }</span></code></pre></div>\n<h3 id=\"string-interpolation\" style=\"position:relative;\"><a href=\"#string-interpolation\" aria-label=\"string interpolation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>String interpolation</h3>\n<p><code class=\"language-text\">log</code> method는 <code class=\"language-text\">util.format</code>을 통하여 문자열 보간을 제공합니다. <strong>이것은 <code class=\"language-text\">format.splat()</code>.</strong>을 사용해야만 합니다.\n아래는 <code class=\"language-text\">format.splat</code>을 사용하여 메시지의 문자열 보간법으로 형식을 정의한 후 <code class=\"language-text\">format.simple</code>을 사용하여 전체 정보 메시지를 직렬화하는 예 입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> createLogger<span class=\"token punctuation\">,</span> format<span class=\"token punctuation\">,</span> transports <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'winston'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> logger <span class=\"token operator\">=</span> <span class=\"token function\">createLogger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  format<span class=\"token operator\">:</span> format<span class=\"token punctuation\">.</span><span class=\"token function\">combine</span><span class=\"token punctuation\">(</span>format<span class=\"token punctuation\">.</span><span class=\"token function\">splat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> format<span class=\"token punctuation\">.</span><span class=\"token function\">simple</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  transports<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">transports<span class=\"token punctuation\">.</span>Console</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// info: test message my string {}</span>\nlogger<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'info'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'test message %s'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'my string'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// info: test message 123 {}</span>\nlogger<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'info'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'test message %d'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">123</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// info: test message first second {number: 123}</span>\nlogger<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'info'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'test message %s, %s'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'first'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'second'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> number<span class=\"token operator\">:</span> <span class=\"token number\">123</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"filtering-code-classlanguage-textinfocode-objects\" style=\"position:relative;\"><a href=\"#filtering-code-classlanguage-textinfocode-objects\" aria-label=\"filtering code classlanguage textinfocode objects permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Filtering <code class=\"language-text\">info</code> Objects</h3>\n<p>log를 기록할 때 간단한 false값을 반환함으로써 <code class=\"language-text\">info</code> 객체를 필터링하길 원한다면 다음과 같이 사용하면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> createLogger<span class=\"token punctuation\">,</span> format<span class=\"token punctuation\">,</span> transports <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'winston'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Ignore log messages if they have { private: true }</span>\n<span class=\"token keyword\">const</span> ignorePrivate <span class=\"token operator\">=</span> <span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">info<span class=\"token punctuation\">,</span> opts</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">.</span>private<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> info\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> logger <span class=\"token operator\">=</span> <span class=\"token function\">createLogger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  format<span class=\"token operator\">:</span> format<span class=\"token punctuation\">.</span><span class=\"token function\">combine</span><span class=\"token punctuation\">(</span><span class=\"token function\">ignorePrivate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> format<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  transports<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">transports<span class=\"token punctuation\">.</span>Console</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Outputs: {\"level\":\"error\",\"message\":\"Public error to share\"}</span>\nlogger<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  level<span class=\"token operator\">:</span> <span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span>\n  message<span class=\"token operator\">:</span> <span class=\"token string\">'Public error to share'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Messages with { private: true } will not be written when logged.</span>\nlogger<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  level<span class=\"token operator\">:</span> <span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span>\n  message<span class=\"token operator\">:</span> <span class=\"token string\">'This is super secret - hide it.'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> format <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'winston'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> combine<span class=\"token punctuation\">,</span> timestamp<span class=\"token punctuation\">,</span> label <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> format\n\n<span class=\"token keyword\">const</span> willNeverThrow <span class=\"token operator\">=</span> format<span class=\"token punctuation\">.</span><span class=\"token function\">combine</span><span class=\"token punctuation\">(</span>\n  <span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">info</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Ignores everything</span>\n  <span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">info</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Never reached'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"creating-custom-formats\" style=\"position:relative;\"><a href=\"#creating-custom-formats\" aria-label=\"creating custom formats permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Creating custom formats</h3>\n<p><em>생략</em></p>\n<h2 id=\"logging-levels\" style=\"position:relative;\"><a href=\"#logging-levels\" aria-label=\"logging levels permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Logging Levels</h2>\n<p><code class=\"language-text\">winston</code>에서의 logging level은 <a href=\"https://tools.ietf.org/html/rfc5424\">RFC5424</a>에서 정의한 순서를 따르고 있습니다. :<em>레벨들은 가장 중요한 것부터 덜 중요한 것 까지 오른차순으로 정의되어 있습니다.</em>\n각 레벨에는 특정 숫자의 우선순위가 부여되며 우선순위가 높을수록 메시지는 더 중요한 것으로 간주됩니다. 예를 들어, <code class=\"language-text\">syslog</code>의 레벨은 0부터 7까지 우선순위가 지정됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"emerg\"</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"alert\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"crit\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"error\"</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"warning\"</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"notice\"</span><span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"info\"</span><span class=\"token operator\">:</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"debug\"</span><span class=\"token operator\">:</span> <span class=\"token number\">7</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>유사하게 <code class=\"language-text\">npm</code> 로그 레벨은 0 부터 9까지 입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"error\"</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"warn\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"info\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"http\"</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"verbose\"</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"debug\"</span><span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"silly\"</span><span class=\"token operator\">:</span> <span class=\"token number\">6</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">winston</code>에서 사용할 level을 정의하지 않으면 위의 <code class=\"language-text\">npm</code> level을 사용하게 됩니다.</p>\n<h3 id=\"using-logging-levels\" style=\"position:relative;\"><a href=\"#using-logging-levels\" aria-label=\"using logging levels permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Using Logging Levels</h3>\n<p>로그 메시지 level 설정은 두가지 방법으로 수행할 수 있습니다. logging level을 보여주는 문자열을 log() 함수를 통하여 보내거나 모든 winston Logger에 정의된 level 정의 함수를 사용하면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//</span>\n<span class=\"token comment\">// Any logger instance</span>\n<span class=\"token comment\">//</span>\nlogger<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'silly'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"127.0.0.1 - there's no place like home\"</span><span class=\"token punctuation\">)</span>\nlogger<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"127.0.0.1 - there's no place like home\"</span><span class=\"token punctuation\">)</span>\nlogger<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'verbose'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"127.0.0.1 - there's no place like home\"</span><span class=\"token punctuation\">)</span>\nlogger<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'info'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"127.0.0.1 - there's no place like home\"</span><span class=\"token punctuation\">)</span>\nlogger<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'warn'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"127.0.0.1 - there's no place like home\"</span><span class=\"token punctuation\">)</span>\nlogger<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"127.0.0.1 - there's no place like home\"</span><span class=\"token punctuation\">)</span>\nlogger<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"127.0.0.1 - there's no place like home\"</span><span class=\"token punctuation\">)</span>\nlogger<span class=\"token punctuation\">.</span><span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"127.0.0.1 - there's no place like home\"</span><span class=\"token punctuation\">)</span>\nlogger<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"127.0.0.1 - there's no place like home\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Default logger</span>\n<span class=\"token comment\">//</span>\nwinston<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'info'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"127.0.0.1 - there's no place like home\"</span><span class=\"token punctuation\">)</span>\nwinston<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"127.0.0.1 - there's no place like home\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><em>생략</em></p>\n<h3 id=\"using-custom-logging-levels\" style=\"position:relative;\"><a href=\"#using-custom-logging-levels\" aria-label=\"using custom logging levels permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Using Custom Logging Levels</h3>\n<p>추가적으로 <code class=\"language-text\">npm</code>, <code class=\"language-text\">syslog</code>, <code class=\"language-text\">cli</code> 레벨들을 <code class=\"language-text\">winston</code>에서 미리 정의할 수 있으며 또한 자신이 만든 것을 선택할 수도 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> myCustomLevels <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  levels<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    foo<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    bar<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    baz<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n    foobar<span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  colors<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    foo<span class=\"token operator\">:</span> <span class=\"token string\">'blue'</span><span class=\"token punctuation\">,</span>\n    bar<span class=\"token operator\">:</span> <span class=\"token string\">'green'</span><span class=\"token punctuation\">,</span>\n    baz<span class=\"token operator\">:</span> <span class=\"token string\">'yellow'</span><span class=\"token punctuation\">,</span>\n    foobar<span class=\"token operator\">:</span> <span class=\"token string\">'red'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> customLevelLogger <span class=\"token operator\">=</span> winston<span class=\"token punctuation\">.</span><span class=\"token function\">createLogger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  levels<span class=\"token operator\">:</span> myCustomLevels<span class=\"token punctuation\">.</span>levels<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\ncustomLevelLogger<span class=\"token punctuation\">.</span><span class=\"token function\">foobar</span><span class=\"token punctuation\">(</span><span class=\"token string\">'some foobar level-ed message'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>이 데이터 구조에는 약간의 반복이 있지만 색상을 사용하지 않으려는 경우 간단히 캡슐화를 사용할 수 있습니다. 색을 가지려면 로거 자체에 레벨을 전달하는 것 외에 다음과 같이 Winston에게 알려야 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">winston<span class=\"token punctuation\">.</span><span class=\"token function\">addColors</span><span class=\"token punctuation\">(</span>myCustomLevels<span class=\"token punctuation\">.</span>colors<span class=\"token punctuation\">)</span></code></pre></div>\n<p>이렇게 하면 컬러화 폼펙터를 사용하여 로거가 사용자 지정 레벨의 log를 적절하게 색칠하고 스타일을 설정할 수 있습니다.\n추가적으로 배경색과 폰트 스타일을 변경시킬수도 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">baz<span class=\"token operator\">:</span> <span class=\"token string\">'italic yellow'</span><span class=\"token punctuation\">,</span>\nfoobar<span class=\"token operator\">:</span> <span class=\"token string\">'bold red cyanBG'</span></code></pre></div>\n<p>가능한 옵션들은 다음과 같습니다.</p>\n<ul>\n<li>Font styles: <code class=\"language-text\">bold</code>, <code class=\"language-text\">dim</code>, <code class=\"language-text\">italic</code>, <code class=\"language-text\">underline</code>, <code class=\"language-text\">inverse</code>, <code class=\"language-text\">hidden</code>, <code class=\"language-text\">strikethrough</code>.</li>\n<li>Font foreground colors: <code class=\"language-text\">black</code>, <code class=\"language-text\">red</code>, <code class=\"language-text\">green</code>, <code class=\"language-text\">yellow</code>, <code class=\"language-text\">blue</code>, <code class=\"language-text\">magenta</code>, <code class=\"language-text\">cyan</code>, <code class=\"language-text\">white</code>, <code class=\"language-text\">gray</code>, <code class=\"language-text\">grey</code>.</li>\n<li>Background colors: <code class=\"language-text\">blackBG</code>, <code class=\"language-text\">redBG</code>, <code class=\"language-text\">greenBG</code>, <code class=\"language-text\">yellowBG</code>, <code class=\"language-text\">blueBG</code>, <code class=\"language-text\">magentaBG</code>, <code class=\"language-text\">cyanBG</code>, <code class=\"language-text\">whiteBG</code>.</li>\n</ul>\n<h3 id=\"colorizing-standard-logging-levels\" style=\"position:relative;\"><a href=\"#colorizing-standard-logging-levels\" aria-label=\"colorizing standard logging levels permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Colorizing Standard logging levels</h3>\n<p>표준 logging level에 색을 추가하기 위해서는 다음과 같이 작업해야 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">winston<span class=\"token punctuation\">.</span>format<span class=\"token punctuation\">.</span><span class=\"token function\">combine</span><span class=\"token punctuation\">(</span>winston<span class=\"token punctuation\">.</span>format<span class=\"token punctuation\">.</span><span class=\"token function\">colorize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> winston<span class=\"token punctuation\">.</span>format<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"마무리\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\"마무리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마무리</h2>\n<p>여기까지 하겠습니다. ㅋㅋ 너무 힘드네요. 하지만 이정도만 알아도 충분할 것으로 예상됩니다. 더욱 알고싶으신 분들은 밑의 winston github repo를 참고하시면 됩니다.</p>\n<p>추가로 제가 작성한 코드입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// src/logger.ts</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createLogger<span class=\"token punctuation\">,</span> format<span class=\"token punctuation\">,</span> transports <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'winston'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> combine<span class=\"token punctuation\">,</span> timestamp<span class=\"token punctuation\">,</span> prettyPrint<span class=\"token punctuation\">,</span> printf<span class=\"token punctuation\">,</span> label <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> format\n\n<span class=\"token keyword\">const</span> myFormat <span class=\"token operator\">=</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> level<span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">,</span> label<span class=\"token punctuation\">,</span> timestamp <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>timestamp<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> [</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>label<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">] </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>level<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>message<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> options <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  file<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    level<span class=\"token operator\">:</span> <span class=\"token string\">'info'</span><span class=\"token punctuation\">,</span>\n    filename<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">logs/test.log</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n    handleExceptions<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    json<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    maxsize<span class=\"token operator\">:</span> <span class=\"token number\">5242880</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 5MB</span>\n    maxFiles<span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span>\n    colorize<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    format<span class=\"token operator\">:</span> <span class=\"token function\">combine</span><span class=\"token punctuation\">(</span><span class=\"token function\">label</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> label<span class=\"token operator\">:</span> <span class=\"token string\">'express'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">timestamp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> myFormat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  console<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    level<span class=\"token operator\">:</span> <span class=\"token string\">'debug'</span><span class=\"token punctuation\">,</span>\n    handleExceptions<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    json<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    colorize<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    format<span class=\"token operator\">:</span> <span class=\"token function\">combine</span><span class=\"token punctuation\">(</span><span class=\"token function\">label</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> label<span class=\"token operator\">:</span> <span class=\"token string\">'express'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">timestamp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> myFormat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> logger <span class=\"token operator\">=</span> <span class=\"token function\">createLogger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  level<span class=\"token operator\">:</span> <span class=\"token string\">'info'</span><span class=\"token punctuation\">,</span>\n  format<span class=\"token operator\">:</span> <span class=\"token function\">combine</span><span class=\"token punctuation\">(</span>format<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">timestamp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">prettyPrint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  transports<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">transports<span class=\"token punctuation\">.</span>File</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">.</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  logger<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">transports<span class=\"token punctuation\">.</span>Console</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">.</span>console<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> logger</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// src/app.ts</span>\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> express <span class=\"token keyword\">from</span> <span class=\"token string\">'express'</span>\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> http <span class=\"token keyword\">from</span> <span class=\"token string\">'http'</span>\n<span class=\"token keyword\">import</span> logger <span class=\"token keyword\">from</span> <span class=\"token string\">'./logger'</span>\n\n<span class=\"token comment\">// Shutdown codes</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">errShutdown</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">server<span class=\"token operator\">:</span> http<span class=\"token punctuation\">.</span>Server<span class=\"token punctuation\">,</span> err<span class=\"token operator\">?</span><span class=\"token operator\">:</span> Error</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  logger<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Stopping server with error: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>err<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">await</span> server<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  process<span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">runServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> app<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">5000</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    logger<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Server app listening on port 5000!'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">errShutdown</span><span class=\"token punctuation\">(</span>server<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">throw</span> e\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">runServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    logger<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">'run succesfully'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ex<span class=\"token operator\">:</span> Error</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    logger<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Unable run:'</span><span class=\"token punctuation\">,</span> ex<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h3>\n<ul>\n<li><a href=\"https://basketdeveloper.tistory.com/42\">NodeJS 인기있는 Logging 모듈 Winston</a></li>\n<li><a href=\"https://github.com/winstonjs/winston\">winston github repo</a></li>\n</ul>","frontmatter":{"title":"Winston으로 Log 관리하기","date":"January 05, 2020"}}},"pageContext":{"slug":"/node.js/winston으로-log-관리하기/","previous":{"fields":{"slug":"/node.js/babel을 이용한 es6 환경 구축/"},"frontmatter":{"title":"babel을 이용한 es6 환경 구축","category":"node.js"}},"next":{"fields":{"slug":"/javascript/호이스팅을-제대로-알아보자/"},"frontmatter":{"title":"호이스팅을 제대로 알아보자","category":"javascript"}}}}}