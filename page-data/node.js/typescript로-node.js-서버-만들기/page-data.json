{"componentChunkName":"component---src-templates-blog-post-js","path":"/node.js/typescript로-node.js-서버-만들기/","result":{"data":{"site":{"siteMetadata":{"title":"Kooku's log","author":"Kooku","siteUrl":"https://kooku.netlify.com","comment":{"disqusShortName":"","utterances":"koomg9599/kooku-s-log"},"sponsor":{"buyMeACoffeeId":"kooku"}}},"markdownRemark":{"id":"071cb35b-dbbd-54ee-8a60-7b3ead05d2e6","excerpt":"TypeScript를 이용하여 Node 서버를 만든 것은 LINE 인턴을 했을때 처음 접하였다. 그리고 몇 달이 지나서 당근마켓의 과제 sample 코드를 보면서 다시 흥미를 가지게 되었고 이번에 다시 공부를 하여 포스팅을 하려고한다. Overview TypeScript로 Node.js 서버 만들기 첫번째 포스팅에서는 ts-node, nodemon, tcs등을 이용하여 셋팅하는 방법을 소개하려고 합니다. 관련 내용은 당근마켓의 과제 sample…","html":"<p>TypeScript를 이용하여 Node 서버를 만든 것은 LINE 인턴을 했을때 처음 접하였다. 그리고 몇 달이 지나서 당근마켓의 과제 sample 코드를 보면서 다시 흥미를 가지게 되었고 이번에 다시 공부를 하여 포스팅을 하려고한다.</p>\n<h2 id=\"overview\" style=\"position:relative;\"><a href=\"#overview\" aria-label=\"overview permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Overview</h2>\n<p>TypeScript로 Node.js 서버 만들기 첫번째 포스팅에서는 ts-node, nodemon, tcs등을 이용하여 셋팅하는 방법을 소개하려고 합니다. 관련 내용은 당근마켓의 과제 sample 코드를 바탕으로 공부하여 작성하였습니다.</p>\n<h2 id=\"setting\" style=\"position:relative;\"><a href=\"#setting\" aria-label=\"setting permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Setting</h2>\n<h3 id=\"1-npm-init\" style=\"position:relative;\"><a href=\"#1-npm-init\" aria-label=\"1 npm init permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1) npm init</h3>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">npm</span> init</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">package name: server\nversion: 0.0.1\ndiscription: node server\ngit repository: // 알아서..\nkeywords: // 알아서..\nauthor: (kooku) //알아서..\nlicense: MIT</code></pre></div>\n<h3 id=\"2-install-dependencies\" style=\"position:relative;\"><a href=\"#2-install-dependencies\" aria-label=\"2 install dependencies permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2) install dependencies</h3>\n<p>처음에 설치해줄 것은 총 6개 입니다.</p>\n<p>typescript, express, nodemon, ts-node, @types/express @types/node</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> typescript express nodemon ts-node @types/express @types/node</code></pre></div>\n<h3 id=\"3-server-code-작성\" style=\"position:relative;\"><a href=\"#3-server-code-%EC%9E%91%EC%84%B1\" aria-label=\"3 server code 작성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3) Server Code 작성</h3>\n<p>TypeScript의 경우 바로 실행을 시키지 못하기 때문에 tsc 이나 ts-node를 이용해서 컴파일을 해줘야합니다.</p>\n<p>우선 컴파일이 잘 되는지 테스트를 하기 위해서 루트 디렉토리에 src 폴더를 만들고 그 안에 app.ts 파일을 만들어줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// src/app.ts</span>\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> express <span class=\"token keyword\">from</span> <span class=\"token string\">'express'</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">runServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  app<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">5000</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'start server'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">runServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>이렇게 설정한 후</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">npx tsc src/app.ts</code></pre></div>\n<p>위의 명령어를 치게 된다면 src 디렉토리안에 <code class=\"language-text\">app.js</code>라는 컴파일된 js 파일이 생성된 것을 알 수 있습니다.</p>\n<p>하지만 이렇게 일일이 옵션과 outputDir 경로들을 작성해주기 귀찮기 때문에 config 파일을 만들어 줄 겁니다.</p>\n<h3 id=\"4-tsconfig\" style=\"position:relative;\"><a href=\"#4-tsconfig\" aria-label=\"4 tsconfig permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4) tsconfig</h3>\n<p>우선 TypeScript 옵션을 지정해주기 위하여 tsconfig 파일을 만들어 주겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">npx tsc --init</code></pre></div>\n<p>위의 명령어를 실행하게되면 <code class=\"language-text\">tsconfig.json</code>파일이 만들어지게됩니다. 여기에 많은 Options이 주석처리 되어있어 살펴보고 필요한 부분은 주석을 해제하면 됩니다.</p>\n<blockquote>\n<p>자세한 옵션들의 내용은 공식홈페이지에서 확인할 수 있습니다. <a href=\"https://www.typescriptlang.org/docs/handbook/tsconfig-json.html\">https://www.typescriptlang.org/docs/handbook/tsconfig-json.html</a></p>\n</blockquote>\n<p>저는 sample 코드에 있었던 Options을 그대로 사용하였습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"module\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"commonjs\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"strict\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"baseUrl\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"outDir\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"build\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"removeComments\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"experimentalDecorators\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"target\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"es6\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"emitDecoratorMetadata\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"moduleResolution\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"node\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"importHelpers\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"types\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"node\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"typeRoots\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"../node_modules/@types\"</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"include\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"./src/**/*.ts\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"exclude\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"./src/public/*\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"../node_modules/**/*\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>여기서 중요한 것은 exclude와 include 그리고 outDir 입니다. include는 컴파일 할 파일들이고, exclude는 컴파일 제외 목록입니다. 그리고 outDir은 컴파일 후 파일들이 들어갈 곳입니다.</p>\n<p>이렇게 한 후</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">npx tsc</code></pre></div>\n<p>위와 같은 명령어를 치게 된다면 <code class=\"language-text\">tsconfig.json</code>파일에 설정된 것처럼 빌드된 js파일들이 <code class=\"language-text\">build</code>폴더안에 생성되게 됩니다.</p>\n<p>그리고 <code class=\"language-text\">node app.js</code>를 이용해서 서버를 키면 됩니다.</p>\n<p>이제 어느정도 셋팅이 되었기 때문에 위의 내용들을 <code class=\"language-text\">script</code>에 등록시키겠습니다.</p>\n<p>루트 디렉토리의 <code class=\"language-text\">package.json</code> 파일의 <code class=\"language-text\">scripts</code>에 명령어를 등록합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"node_test\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0.0.1\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ts-node test\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"main\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"app.ts\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"tsc\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"set NODE_ENV=production&amp;&amp; node build/app.js\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"author\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"kooku\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"license\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"MIT\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"dependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"@types/express\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^4.17.2\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"@types/node\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^13.1.1\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"express\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^4.17.1\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"nodemon\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^2.0.2\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"ts-node\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^8.5.4\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"typescript\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^3.7.4\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이렇게 등록을 했다면 다음의 명령어로 서버를 킬 수 있습니다.</p>\n<blockquote>\n<p><code class=\"language-text\">package.json</code>의 <code class=\"language-text\">scripts</code>에 등록된 명령어는 <code class=\"language-text\">npm run</code> 명령어를 통해 실행 시킬 수 있습니다.\n하지만 많이 사용하는 stript인 <code class=\"language-text\">start</code>와 <code class=\"language-text\">test</code>는 run을 붙히지 않고 <code class=\"language-text\">npm start</code>, <code class=\"language-text\">npm test</code>로 실행 시킬 수 있습니다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">npm</span> run build\n<span class=\"token function\">npm</span> run start</code></pre></div>\n<p><code class=\"language-text\">start</code> 명령어중 <code class=\"language-text\">set NODE_ENV_production</code>의 경우 잠시후에 다시 소개하겠습니다.</p>\n<h3 id=\"5-nodemon\" style=\"position:relative;\"><a href=\"#5-nodemon\" aria-label=\"5 nodemon permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5) Nodemon</h3>\n<p>하지만 위와 같은 방법으로 서버를 키게된다면 개발 속도가 너무 느린데요 그 이유는 코드를 한줄 수정하고 명령어를 두번 입력해야 되기 때문입니다. 따라서 node 개발에서 많이 사용하는 nodemon을 사용해 보겠습니다.</p>\n<p>하지만 nodemon 은 javascript 파일만 반영되기 때문에 이때 ts-node라는 모듈을 사용해야합니다. ts-node는 메모리 상에서 typescript를 transpile 해주는 모듈입니다.</p>\n<p>테스트를 해본결과</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">npx nodemon src/app.ts</code></pre></div>\n<p>위와 같은 명령어를 실행하면 알아서 ts-node를 불러와 수행하는 것을 확인할 수 있었다.</p>\n<p>하지만 이러한 내용들도 <code class=\"language-text\">nodemon.json</code>을 이용하여 손쉽게 사용할 수 있다.</p>\n<p>우선 <code class=\"language-text\">nodemon.json</code>파일을 만들어주자</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"watch\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"src\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"ext\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ts\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"delay\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2500ms\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"ignore\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"src/public\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"test/*\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"exec\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"set NODE_ENV=dev&amp;&amp; ts-node src/app.ts\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>잘 보면알겠지만 <code class=\"language-text\">src</code> 디렉토리에서의 변경내용들을 확인하여 자동으로 restart 시켜줍니다. 그리고 development 환경이기에 환경변수 <code class=\"language-text\">NODE_ENV=dev</code>를 설정하는데. 위에서 scripts 명령어중 <code class=\"language-text\">start</code> 에 <code class=\"language-text\">NODE_ENV=production</code>을 적어준 것과 같은 맥락입니다.</p>\n<blockquote>\n<p>참고로 <code class=\"language-text\">NODE_ENV</code> 환경변수 설정에서 set이라는 명령어를 사용했지만 이것은 window에서의 명령어고, maxOS or Linux에서는 다른 명령어를 사용한다.</p>\n<p>NODE_ENV의 경우 개발환경인지 배포환경이지에 따라 다른 작업을 수행할 필요가 있을 때를 위하여 작성하였습니다.</p>\n</blockquote>\n<p><code class=\"language-text\">nodemon.json</code> 설정이 다 되었으므로 <code class=\"language-text\">package.json</code>에 <code class=\"language-text\">start:dev</code> 명령어를 추가하겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"node_test\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0.0.1\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ts-node test\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"main\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"app.ts\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"start:dev\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"nodemon --config ./nodemon.json\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"rd /s ./build &amp;&amp; tsc\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"set NODE_ENV=production&amp;&amp; node build/app.js\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"author\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"kooku\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"license\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"MIT\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"dependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"@types/express\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^4.17.2\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"@types/node\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^13.1.1\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"express\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^4.17.1\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"nodemon\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^2.0.2\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"ts-node\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^8.5.4\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"typescript\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^3.7.4\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p><strong>build</strong> 할 때 이전에 빌드된 <code class=\"language-text\">build</code> 폴더를 삭제하고 다시 빌드하게 하였습니다. <code class=\"language-text\">rd /s</code> 명령어는 <em>window</em> 명령어이고, linux 또는 macOS에서는 <code class=\"language-text\">rm -rf</code>를 사용하면 됩니다.</p>\n</blockquote>\n<h3 id=\"마무리\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\"마무리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마무리</h3>\n<p>이렇게 모든 설정이 완료되었습니다.</p>\n<p>이렇게 설정을 한 후 개발할 때는</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">npm</span> run start:dev</code></pre></div>\n<p>배포할 때는</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">npm</span> run build\n<span class=\"token function\">npm</span> run start</code></pre></div>\n<p>하면 끝~!</p>","frontmatter":{"title":"typescript로 node.js 서버 만들기","date":"December 30, 2019"}}},"pageContext":{"slug":"/node.js/typescript로-node.js-서버-만들기/","previous":{"fields":{"slug":"/etc/axios-통합-모듈/"},"frontmatter":{"title":"axios 통합 모듈","category":"etc"}},"next":{"fields":{"slug":"/node.js/express.js-란/"},"frontmatter":{"title":"Express.js 란","category":"node.js"}}}}}